import { __extends } from "tslib";
import { CodePipelineClient } from "./CodePipelineClient";
import { AcknowledgeJobCommand, } from "./commands/AcknowledgeJobCommand";
import { AcknowledgeThirdPartyJobCommand, } from "./commands/AcknowledgeThirdPartyJobCommand";
import { CreateCustomActionTypeCommand, } from "./commands/CreateCustomActionTypeCommand";
import { CreatePipelineCommand, } from "./commands/CreatePipelineCommand";
import { DeleteCustomActionTypeCommand, } from "./commands/DeleteCustomActionTypeCommand";
import { DeletePipelineCommand, } from "./commands/DeletePipelineCommand";
import { DeleteWebhookCommand, } from "./commands/DeleteWebhookCommand";
import { DeregisterWebhookWithThirdPartyCommand, } from "./commands/DeregisterWebhookWithThirdPartyCommand";
import { DisableStageTransitionCommand, } from "./commands/DisableStageTransitionCommand";
import { EnableStageTransitionCommand, } from "./commands/EnableStageTransitionCommand";
import { GetActionTypeCommand, } from "./commands/GetActionTypeCommand";
import { GetJobDetailsCommand, } from "./commands/GetJobDetailsCommand";
import { GetPipelineCommand } from "./commands/GetPipelineCommand";
import { GetPipelineExecutionCommand, } from "./commands/GetPipelineExecutionCommand";
import { GetPipelineStateCommand, } from "./commands/GetPipelineStateCommand";
import { GetThirdPartyJobDetailsCommand, } from "./commands/GetThirdPartyJobDetailsCommand";
import { ListActionExecutionsCommand, } from "./commands/ListActionExecutionsCommand";
import { ListActionTypesCommand, } from "./commands/ListActionTypesCommand";
import { ListPipelineExecutionsCommand, } from "./commands/ListPipelineExecutionsCommand";
import { ListPipelinesCommand, } from "./commands/ListPipelinesCommand";
import { ListTagsForResourceCommand, } from "./commands/ListTagsForResourceCommand";
import { ListWebhooksCommand, } from "./commands/ListWebhooksCommand";
import { PollForJobsCommand } from "./commands/PollForJobsCommand";
import { PollForThirdPartyJobsCommand, } from "./commands/PollForThirdPartyJobsCommand";
import { PutActionRevisionCommand, } from "./commands/PutActionRevisionCommand";
import { PutApprovalResultCommand, } from "./commands/PutApprovalResultCommand";
import { PutJobFailureResultCommand, } from "./commands/PutJobFailureResultCommand";
import { PutJobSuccessResultCommand, } from "./commands/PutJobSuccessResultCommand";
import { PutThirdPartyJobFailureResultCommand, } from "./commands/PutThirdPartyJobFailureResultCommand";
import { PutThirdPartyJobSuccessResultCommand, } from "./commands/PutThirdPartyJobSuccessResultCommand";
import { PutWebhookCommand } from "./commands/PutWebhookCommand";
import { RegisterWebhookWithThirdPartyCommand, } from "./commands/RegisterWebhookWithThirdPartyCommand";
import { RetryStageExecutionCommand, } from "./commands/RetryStageExecutionCommand";
import { StartPipelineExecutionCommand, } from "./commands/StartPipelineExecutionCommand";
import { StopPipelineExecutionCommand, } from "./commands/StopPipelineExecutionCommand";
import { TagResourceCommand } from "./commands/TagResourceCommand";
import { UntagResourceCommand, } from "./commands/UntagResourceCommand";
import { UpdateActionTypeCommand, } from "./commands/UpdateActionTypeCommand";
import { UpdatePipelineCommand, } from "./commands/UpdatePipelineCommand";
var CodePipeline = (function (_super) {
    __extends(CodePipeline, _super);
    function CodePipeline() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CodePipeline.prototype.acknowledgeJob = function (args, optionsOrCb, cb) {
        var command = new AcknowledgeJobCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.acknowledgeThirdPartyJob = function (args, optionsOrCb, cb) {
        var command = new AcknowledgeThirdPartyJobCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.createCustomActionType = function (args, optionsOrCb, cb) {
        var command = new CreateCustomActionTypeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.createPipeline = function (args, optionsOrCb, cb) {
        var command = new CreatePipelineCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.deleteCustomActionType = function (args, optionsOrCb, cb) {
        var command = new DeleteCustomActionTypeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.deletePipeline = function (args, optionsOrCb, cb) {
        var command = new DeletePipelineCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.deleteWebhook = function (args, optionsOrCb, cb) {
        var command = new DeleteWebhookCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.deregisterWebhookWithThirdParty = function (args, optionsOrCb, cb) {
        var command = new DeregisterWebhookWithThirdPartyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.disableStageTransition = function (args, optionsOrCb, cb) {
        var command = new DisableStageTransitionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.enableStageTransition = function (args, optionsOrCb, cb) {
        var command = new EnableStageTransitionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.getActionType = function (args, optionsOrCb, cb) {
        var command = new GetActionTypeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.getJobDetails = function (args, optionsOrCb, cb) {
        var command = new GetJobDetailsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.getPipeline = function (args, optionsOrCb, cb) {
        var command = new GetPipelineCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.getPipelineExecution = function (args, optionsOrCb, cb) {
        var command = new GetPipelineExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.getPipelineState = function (args, optionsOrCb, cb) {
        var command = new GetPipelineStateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.getThirdPartyJobDetails = function (args, optionsOrCb, cb) {
        var command = new GetThirdPartyJobDetailsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.listActionExecutions = function (args, optionsOrCb, cb) {
        var command = new ListActionExecutionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.listActionTypes = function (args, optionsOrCb, cb) {
        var command = new ListActionTypesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.listPipelineExecutions = function (args, optionsOrCb, cb) {
        var command = new ListPipelineExecutionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.listPipelines = function (args, optionsOrCb, cb) {
        var command = new ListPipelinesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.listTagsForResource = function (args, optionsOrCb, cb) {
        var command = new ListTagsForResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.listWebhooks = function (args, optionsOrCb, cb) {
        var command = new ListWebhooksCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.pollForJobs = function (args, optionsOrCb, cb) {
        var command = new PollForJobsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.pollForThirdPartyJobs = function (args, optionsOrCb, cb) {
        var command = new PollForThirdPartyJobsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.putActionRevision = function (args, optionsOrCb, cb) {
        var command = new PutActionRevisionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.putApprovalResult = function (args, optionsOrCb, cb) {
        var command = new PutApprovalResultCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.putJobFailureResult = function (args, optionsOrCb, cb) {
        var command = new PutJobFailureResultCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.putJobSuccessResult = function (args, optionsOrCb, cb) {
        var command = new PutJobSuccessResultCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.putThirdPartyJobFailureResult = function (args, optionsOrCb, cb) {
        var command = new PutThirdPartyJobFailureResultCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.putThirdPartyJobSuccessResult = function (args, optionsOrCb, cb) {
        var command = new PutThirdPartyJobSuccessResultCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.putWebhook = function (args, optionsOrCb, cb) {
        var command = new PutWebhookCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.registerWebhookWithThirdParty = function (args, optionsOrCb, cb) {
        var command = new RegisterWebhookWithThirdPartyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.retryStageExecution = function (args, optionsOrCb, cb) {
        var command = new RetryStageExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.startPipelineExecution = function (args, optionsOrCb, cb) {
        var command = new StartPipelineExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.stopPipelineExecution = function (args, optionsOrCb, cb) {
        var command = new StopPipelineExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.tagResource = function (args, optionsOrCb, cb) {
        var command = new TagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.untagResource = function (args, optionsOrCb, cb) {
        var command = new UntagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.updateActionType = function (args, optionsOrCb, cb) {
        var command = new UpdateActionTypeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodePipeline.prototype.updatePipeline = function (args, optionsOrCb, cb) {
        var command = new UpdatePipelineCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    return CodePipeline;
}(CodePipelineClient));
export { CodePipeline };
