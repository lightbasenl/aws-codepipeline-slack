"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodePipeline = void 0;
const CodePipelineClient_1 = require("./CodePipelineClient");
const AcknowledgeJobCommand_1 = require("./commands/AcknowledgeJobCommand");
const AcknowledgeThirdPartyJobCommand_1 = require("./commands/AcknowledgeThirdPartyJobCommand");
const CreateCustomActionTypeCommand_1 = require("./commands/CreateCustomActionTypeCommand");
const CreatePipelineCommand_1 = require("./commands/CreatePipelineCommand");
const DeleteCustomActionTypeCommand_1 = require("./commands/DeleteCustomActionTypeCommand");
const DeletePipelineCommand_1 = require("./commands/DeletePipelineCommand");
const DeleteWebhookCommand_1 = require("./commands/DeleteWebhookCommand");
const DeregisterWebhookWithThirdPartyCommand_1 = require("./commands/DeregisterWebhookWithThirdPartyCommand");
const DisableStageTransitionCommand_1 = require("./commands/DisableStageTransitionCommand");
const EnableStageTransitionCommand_1 = require("./commands/EnableStageTransitionCommand");
const GetActionTypeCommand_1 = require("./commands/GetActionTypeCommand");
const GetJobDetailsCommand_1 = require("./commands/GetJobDetailsCommand");
const GetPipelineCommand_1 = require("./commands/GetPipelineCommand");
const GetPipelineExecutionCommand_1 = require("./commands/GetPipelineExecutionCommand");
const GetPipelineStateCommand_1 = require("./commands/GetPipelineStateCommand");
const GetThirdPartyJobDetailsCommand_1 = require("./commands/GetThirdPartyJobDetailsCommand");
const ListActionExecutionsCommand_1 = require("./commands/ListActionExecutionsCommand");
const ListActionTypesCommand_1 = require("./commands/ListActionTypesCommand");
const ListPipelineExecutionsCommand_1 = require("./commands/ListPipelineExecutionsCommand");
const ListPipelinesCommand_1 = require("./commands/ListPipelinesCommand");
const ListTagsForResourceCommand_1 = require("./commands/ListTagsForResourceCommand");
const ListWebhooksCommand_1 = require("./commands/ListWebhooksCommand");
const PollForJobsCommand_1 = require("./commands/PollForJobsCommand");
const PollForThirdPartyJobsCommand_1 = require("./commands/PollForThirdPartyJobsCommand");
const PutActionRevisionCommand_1 = require("./commands/PutActionRevisionCommand");
const PutApprovalResultCommand_1 = require("./commands/PutApprovalResultCommand");
const PutJobFailureResultCommand_1 = require("./commands/PutJobFailureResultCommand");
const PutJobSuccessResultCommand_1 = require("./commands/PutJobSuccessResultCommand");
const PutThirdPartyJobFailureResultCommand_1 = require("./commands/PutThirdPartyJobFailureResultCommand");
const PutThirdPartyJobSuccessResultCommand_1 = require("./commands/PutThirdPartyJobSuccessResultCommand");
const PutWebhookCommand_1 = require("./commands/PutWebhookCommand");
const RegisterWebhookWithThirdPartyCommand_1 = require("./commands/RegisterWebhookWithThirdPartyCommand");
const RetryStageExecutionCommand_1 = require("./commands/RetryStageExecutionCommand");
const StartPipelineExecutionCommand_1 = require("./commands/StartPipelineExecutionCommand");
const StopPipelineExecutionCommand_1 = require("./commands/StopPipelineExecutionCommand");
const TagResourceCommand_1 = require("./commands/TagResourceCommand");
const UntagResourceCommand_1 = require("./commands/UntagResourceCommand");
const UpdateActionTypeCommand_1 = require("./commands/UpdateActionTypeCommand");
const UpdatePipelineCommand_1 = require("./commands/UpdatePipelineCommand");
class CodePipeline extends CodePipelineClient_1.CodePipelineClient {
    acknowledgeJob(args, optionsOrCb, cb) {
        const command = new AcknowledgeJobCommand_1.AcknowledgeJobCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    acknowledgeThirdPartyJob(args, optionsOrCb, cb) {
        const command = new AcknowledgeThirdPartyJobCommand_1.AcknowledgeThirdPartyJobCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createCustomActionType(args, optionsOrCb, cb) {
        const command = new CreateCustomActionTypeCommand_1.CreateCustomActionTypeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createPipeline(args, optionsOrCb, cb) {
        const command = new CreatePipelineCommand_1.CreatePipelineCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteCustomActionType(args, optionsOrCb, cb) {
        const command = new DeleteCustomActionTypeCommand_1.DeleteCustomActionTypeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deletePipeline(args, optionsOrCb, cb) {
        const command = new DeletePipelineCommand_1.DeletePipelineCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteWebhook(args, optionsOrCb, cb) {
        const command = new DeleteWebhookCommand_1.DeleteWebhookCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deregisterWebhookWithThirdParty(args, optionsOrCb, cb) {
        const command = new DeregisterWebhookWithThirdPartyCommand_1.DeregisterWebhookWithThirdPartyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disableStageTransition(args, optionsOrCb, cb) {
        const command = new DisableStageTransitionCommand_1.DisableStageTransitionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    enableStageTransition(args, optionsOrCb, cb) {
        const command = new EnableStageTransitionCommand_1.EnableStageTransitionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getActionType(args, optionsOrCb, cb) {
        const command = new GetActionTypeCommand_1.GetActionTypeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getJobDetails(args, optionsOrCb, cb) {
        const command = new GetJobDetailsCommand_1.GetJobDetailsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getPipeline(args, optionsOrCb, cb) {
        const command = new GetPipelineCommand_1.GetPipelineCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getPipelineExecution(args, optionsOrCb, cb) {
        const command = new GetPipelineExecutionCommand_1.GetPipelineExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getPipelineState(args, optionsOrCb, cb) {
        const command = new GetPipelineStateCommand_1.GetPipelineStateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getThirdPartyJobDetails(args, optionsOrCb, cb) {
        const command = new GetThirdPartyJobDetailsCommand_1.GetThirdPartyJobDetailsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listActionExecutions(args, optionsOrCb, cb) {
        const command = new ListActionExecutionsCommand_1.ListActionExecutionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listActionTypes(args, optionsOrCb, cb) {
        const command = new ListActionTypesCommand_1.ListActionTypesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listPipelineExecutions(args, optionsOrCb, cb) {
        const command = new ListPipelineExecutionsCommand_1.ListPipelineExecutionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listPipelines(args, optionsOrCb, cb) {
        const command = new ListPipelinesCommand_1.ListPipelinesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listTagsForResource(args, optionsOrCb, cb) {
        const command = new ListTagsForResourceCommand_1.ListTagsForResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listWebhooks(args, optionsOrCb, cb) {
        const command = new ListWebhooksCommand_1.ListWebhooksCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    pollForJobs(args, optionsOrCb, cb) {
        const command = new PollForJobsCommand_1.PollForJobsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    pollForThirdPartyJobs(args, optionsOrCb, cb) {
        const command = new PollForThirdPartyJobsCommand_1.PollForThirdPartyJobsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putActionRevision(args, optionsOrCb, cb) {
        const command = new PutActionRevisionCommand_1.PutActionRevisionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putApprovalResult(args, optionsOrCb, cb) {
        const command = new PutApprovalResultCommand_1.PutApprovalResultCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putJobFailureResult(args, optionsOrCb, cb) {
        const command = new PutJobFailureResultCommand_1.PutJobFailureResultCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putJobSuccessResult(args, optionsOrCb, cb) {
        const command = new PutJobSuccessResultCommand_1.PutJobSuccessResultCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putThirdPartyJobFailureResult(args, optionsOrCb, cb) {
        const command = new PutThirdPartyJobFailureResultCommand_1.PutThirdPartyJobFailureResultCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putThirdPartyJobSuccessResult(args, optionsOrCb, cb) {
        const command = new PutThirdPartyJobSuccessResultCommand_1.PutThirdPartyJobSuccessResultCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putWebhook(args, optionsOrCb, cb) {
        const command = new PutWebhookCommand_1.PutWebhookCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    registerWebhookWithThirdParty(args, optionsOrCb, cb) {
        const command = new RegisterWebhookWithThirdPartyCommand_1.RegisterWebhookWithThirdPartyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    retryStageExecution(args, optionsOrCb, cb) {
        const command = new RetryStageExecutionCommand_1.RetryStageExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startPipelineExecution(args, optionsOrCb, cb) {
        const command = new StartPipelineExecutionCommand_1.StartPipelineExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    stopPipelineExecution(args, optionsOrCb, cb) {
        const command = new StopPipelineExecutionCommand_1.StopPipelineExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    tagResource(args, optionsOrCb, cb) {
        const command = new TagResourceCommand_1.TagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    untagResource(args, optionsOrCb, cb) {
        const command = new UntagResourceCommand_1.UntagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateActionType(args, optionsOrCb, cb) {
        const command = new UpdateActionTypeCommand_1.UpdateActionTypeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updatePipeline(args, optionsOrCb, cb) {
        const command = new UpdatePipelineCommand_1.UpdatePipelineCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
}
exports.CodePipeline = CodePipeline;
